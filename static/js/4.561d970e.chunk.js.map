{"version":3,"sources":["components/UI/Spinner/Spinner.js","components/UI/Spinner/Spinner.css","components/UI/Button/BigButton.css","containers/Auth/Auth.css","components/UI/Button/BigButton.js","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Spinner_css__WEBPACK_IMPORTED_MODULE_1__","_Spinner_css__WEBPACK_IMPORTED_MODULE_1___default","spinner","props","a","createElement","className","classes","Loader","module","exports","load2","BigButton","Success","Auth","bigButton","btnClasses","btnType","push","react_default","style","join","children","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","_this","Object","defineProperty","target","checkValidity","setState","logout","token","userId","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","_this2","this","formElementsArray","key","id","config","form","map","formElement","Input","valueType","invalid","shouldValidate","changed","loading","Spinner","errorMessage","error","message","authRedirect","isAuthenticated","react_router","to","onSubmit","Button_BigButton","marginTop","Button","marginRight","paddingRight","clicked","Component","connect","auth","dispatch","actions"],"mappings":"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","file":"static/js/4.561d970e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './Spinner.css';\r\n\r\n\r\nconst spinner = props => (\r\n    <div className={classes.Loader}>Loading...</div>\r\n);\r\n\r\nexport default spinner;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner__Loader__1DDwY\",\"load2\":\"Spinner__load2__1N7mg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BigButton\":\"BigButton__BigButton__2fD4z\",\"Success\":\"BigButton__Success__AYRy2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth__2YUr1\"};","import React from 'react';\r\n\r\nimport classes from './BigButton.css';\r\n\r\nconst bigButton = props => {\r\nconst btnClasses = [classes.BigButton];\r\nif(props.btnType){\r\n    btnClasses.push(classes[props.btnType]);\r\n}\r\nreturn <button style={props.style} className={btnClasses.join(' ')}>{props.children}</button>\r\n};\r\n\r\nexport default bigButton","import React, { Component } from \"react\";\r\n\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport BigButton from '../../components/UI/Button/BigButton';\r\nimport classes from \"./Auth.css\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateObject, checkValidity } from \"../../shared/utility\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"email\",\r\n          placeholder: \"E-mail\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: {\r\n          type: \"password\",\r\n          placeholder: \"Password\"\r\n        },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      }\r\n    },\r\n    isSignup: true\r\n  };\r\n\r\n  \r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(this.state.controls, {\r\n      [controlName]: updateObject(this.state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true\r\n      })\r\n    });\r\n\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  logout = () => {\r\n    this.setState({ token: null, userId: null });\r\n  };\r\n\r\n  submitHandler = event => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignup\r\n    );\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState(prevState => {\r\n      return {\r\n        isSignup: !prevState.isSignup\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key]\r\n      });\r\n    }\r\n\r\n    let form = formElementsArray.map(formElement => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        valueType={formElement.id}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={event => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ));\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />;\r\n    }\r\n\r\n    let errorMessage = null;\r\n\r\n    if (this.props.error) {\r\n      errorMessage = <p>{this.props.error.message}</p>;\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <BigButton style={{marginTop: '20px'}} btnType=\"Success\">Submit</BigButton>\r\n        </form>\r\n        <Button style={{marginRight:'0px', paddingRight:'0px'}} btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\r\n          Switch to {this.state.isSignup ? \"Sign In\" : \"Sign Up\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignup) =>\r\n      dispatch(actions.auth(email, password, isSignup))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Auth);\r\n"],"sourceRoot":""}